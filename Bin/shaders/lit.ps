// Globals
Texture2D shaderTexture;
SamplerState SampleType;

cbuffer LightBuffer
{
	float4 ambientColor;
	float4 diffuseColor;
	float3 lightDirection;
	float specularPower;
	float4 specularColor;
};

struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
    float3 normal : NORMAL;
    float3 viewDirection : TEXCOORD1;
};

float4 LightPixelShader(PixelInputType input) : SV_TARGET
{
    // Sample the pixel color from the texture using the sampler at this texture coordinate location.
    float4 textureColor = shaderTexture.Sample(SampleType, input.tex);

	float4 color = ambientColor;

	float4 specular = float4(0.0f, 0.0f, 0.0f, 0.0f);

    // Invert light direction before calculations
    float3 lightDir = -lightDirection;

    // Calculate amount of light
    float lightIntensity = saturate(dot(input.normal, lightDir));


    float3 reflection;

    if(lightIntensity > 0.0f)
    {
	     color += (diffuseColor * lightIntensity);

	     color = saturate(color);

	     // Calculate reflection
	     reflection = normalize(2 * lightIntensity * input.normal - lightDir);

	     // Determine amount of specular light
	     specular = pow(saturate(dot(reflection, input.viewDirection)), specularPower);

    }

    

    // Combine diffuse color with texture color
    color = color * textureColor;

    // Add specular
	color = saturate(color + specular);
    
    return color;
}